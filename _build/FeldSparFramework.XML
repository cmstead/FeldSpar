<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FeldSparFramework</name></assembly>
<members>
<member name="T:AssemblyInfo">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.AssemblyConfiguration">
 <summary>
 A type used to configure reporters for gold standard (approval tests)
 </summary>
</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.Configuration">
 <summary>
 A type to allow the dynamic loading of configuration if it is used
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.FailureReport">
 <summary>
 Data about a failing test
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.IgnoredTest">
 <summary>
 A type representing an ignored unit test
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.OutputReport">
 <summary>
 Data about a test assembly results
 </summary>
</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.Test">
 <summary>
 A type represeting a unit test
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.TestEnvironment">
 <summary>
 Information about the current executing test evironment
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.TestTheoryTemplate`1">
 <summary>
 Data that shows how to combine a theory test with data
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.TheoryCaseTemplate`1">
 <summary>
 Data representing a therory or parameterized test.
 </summary>
</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.Theory`1">
 <summary>
 A type used to creat a theory test case
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.ConsoleRunner">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.Engine.RunConfiguration">
 <summary>
 Information about the configuration of an assembly
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.Engine.ExecutionStatus">
 <summary>
 A type used to report the status of a test durring execution
 </summary>
</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.Engine.ExecutionToken">
 <summary>
 A type that carries information about a test durring execution reporting
 </summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FeldSpar.Framework.Engine.Runner.runTests(System.Boolean,System.String)">
 <summary>
 Searches test assembly for tests and runs them.
 </summary>
 <param name="ignoreAssemblyConfig">Ured if you do not want gold standard testing reporters</param>
 <param name="assemblyPath">the path of the assembly</param>
</member>
<member name="M:FeldSpar.Framework.Engine.Runner.findTests(System.Boolean,System.String)">
 <summary>
 Searches test assembly for tests
 </summary>
 <param name="ignoreAssemblyConfig">Ured if you do not want gold standard testing reporters</param>
 <param name="assemblyPath">the path of the assembly</param>
</member>
<member name="M:FeldSpar.Framework.Engine.Runner.runTestsAndReport(System.Boolean,Microsoft.FSharp.Core.FSharpFunc{FeldSpar.Framework.Engine.ExecutionStatus,Microsoft.FSharp.Core.Unit},System.String)">
 <summary>
 Searches test assembly for tests and runs them. It then reports as it finds them, runs, them, and they complete.
 </summary>
 <param name="ignoreAssemblyConfig">Ured if you do not want gold standard testing reporters</param>
 <param name="report">Used to report when a test is found</param>
 <param name="assemblyPath">the path of the assembly</param>
</member>
<member name="M:FeldSpar.Framework.Engine.Runner.findTestsAndReport(System.Boolean,Microsoft.FSharp.Core.FSharpFunc{FeldSpar.Framework.Engine.ExecutionStatus,Microsoft.FSharp.Core.Unit},System.String)">
 <summary>
 Searches test assembly for tests and reports as it finds them.
 </summary>
 <param name="ignoreAssemblyConfig">Ured if you do not want gold standard testing reporters</param>
 <param name="report">Used to report when a test is found</param>
 <param name="assemblyPath">the path of the assembly</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FeldSpar.Framework.Engine.Runner.convertTheoryToTests``1(FeldSpar.Framework.Theory{``0},System.String)">
 <summary>
 Converts theory a theory template into an array of test templates
 </summary>
 <param name="baseName">The name of the theory template being converted</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FeldSpar.Framework.Engine.Runner.shuffle``1(``0[],Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.Int32,System.Int32},System.Int32})">
 <summary>
 A way to randomize an array
 </summary>
 <param name="items">the array to randomize</param>
 <param name="getRandom">a random number generator that takes (low range * high range) and returns a number between them, inclusively</param>
</member>
<member name="M:FeldSpar.Framework.Engine.Runner.buildTestPlan(FeldSpar.Framework.AssemblyConfiguration,Microsoft.FSharp.Core.FSharpFunc{FeldSpar.Framework.Engine.ExecutionStatus,Microsoft.FSharp.Core.Unit},System.String,System.Reflection.Assembly,System.Tuple{System.String,FeldSpar.Framework.Test}[])">
 <summary>
 Takes all test templates and converts them to executable unit tests 
 </summary>
 <param name="environment">The configuration information for the assembly</param>
 <param name="report">a way to report progress of any test</param>
 <param name="assemblyPath">the path to the test assembly</param>
 <param name="assembly">the test assembly</param>
 <param name="tests">the test templates to convert</param>
</member>
<member name="">

</member>
<member name="M:FeldSpar.Framework.Engine.Runner.findConfiguration(System.Boolean,System.String)">
 <summary>
 Finds the configuration object for a test assembly. This object is used to set up reporters for gold standard testing.
 </summary>
 <param name="ignoreAssemblyConfig">is used to bypass the use of the configuration object</param>
 <param name="assemblyPath">the path of the test assembly</param>
</member>
<member name="">

</member>
<member name="M:FeldSpar.Framework.Engine.Runner.reportResults(System.Collections.Generic.IEnumerable{FeldSpar.Framework.ExecutionSummary})">
 <summary>
 Converts Execution summaries to strings for reporting on
 </summary>
 <param name="results">the execution summaries to report</param>
</member>
<member name="M:FeldSpar.Framework.Engine.Runner.createTestFromTemplate(FeldSpar.Framework.AssemblyConfiguration,Microsoft.FSharp.Core.FSharpFunc{FeldSpar.Framework.Engine.ExecutionStatus,Microsoft.FSharp.Core.Unit},System.String,System.String,System.Reflection.Assembly,FeldSpar.Framework.Test)">
 <summary>
 Creates an executable unit test from a template type
 </summary>
 <param name="globalEnv">Information about the current executing environment for the test assembly</param>
 <param name="report">a way to report progress as the test executes</param>
 <param name="testName">the name of the test</param>
 <param name="assemblyPath">the path of the test assembly</param>
 <param name="assembly">the test assembly</param>
 <param name="template">the template to use  to create an executable unit test</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.Engine.Runner">

</member>
<member name="M:FeldSpar.Framework.Formatters.Basic.printResults(System.Collections.Generic.IEnumerable{FeldSpar.Framework.ExecutionSummary})">
 <summary>
 Maps all Execution summaries to a friendly string
 </summary>
 <param name="results">the results to convert</param>
</member>
<member name="M:FeldSpar.Framework.Formatters.Basic.printExecutionSummary(FeldSpar.Framework.ExecutionSummary)">
 <summary>
 Converts an ExecutionSummary into a friendlystring
 </summary>
 <param name="result">the execution summary to convert</param>
</member>
<member name="M:FeldSpar.Framework.Formatters.Basic.printResult(System.String,FeldSpar.Framework.TestResult)">
 <summary>
 Converts a TestResult into a freindly string
 </summary>
 <param name="prefix">something to appent to the front of the string.</param>
 <param name="result">The result to convert</param>
</member>
<member name="M:FeldSpar.Framework.Formatters.Basic.CanonicalizeString(System.String)">
 <summary>
 Converts a string into a string that is ok for a file name
 </summary>
 <param name="value">the string to convert</param>
</member>
<member name="T:FeldSpar.Framework.Formatters.Basic">

</member>
<member name="M:FeldSpar.Framework.TestResultUtilities.filterBySuccess(Microsoft.FSharp.Collections.FSharpList{FeldSpar.Framework.TestResult})">
 <summary>
 Reduce a sequence of results down to only the Successes. Returns indeterminate if the sequence of results is empty.
 </summary>
 <param name="results">The results to filtes</param>
</member>
<member name="M:FeldSpar.Framework.TestResultUtilities.filterByFailures(Microsoft.FSharp.Collections.FSharpList{FeldSpar.Framework.TestResult})">
 <summary>
 Reduce a sequence of results down to only the failures. Returns indeterminate if the sequence of results is empty.
 </summary>
 <param name="results">The results to filtes</param>
</member>
<member name="M:FeldSpar.Framework.TestResultUtilities.filterBy(Microsoft.FSharp.Core.FSharpFunc{FeldSpar.Framework.TestResult,System.Boolean},System.Collections.Generic.IEnumerable{FeldSpar.Framework.TestResult})">
 <summary>
 Filters a sequence of tests by a filter criteria. Returns indeterminate if the sequence of results is empty.
 </summary>
 <param name="filter">the filter criteria</param>
 <param name="results">the results to filter</param>
</member>
<member name="M:FeldSpar.Framework.TestResultUtilities.filterSuccesses(FeldSpar.Framework.TestResult)">
 <summary>
 Returns true if the result is a Success
 </summary>
 <param name="result">the result to check</param>
</member>
<member name="M:FeldSpar.Framework.TestResultUtilities.filterFailures(FeldSpar.Framework.TestResult)">
 <summary>
 Returns true if the result is a Failue
 </summary>
 <param name="result">the result to check</param>
</member>
<member name="T:FeldSpar.Framework.TestResultUtilities">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.TestSummaryUtilities">

</member>
<member name="M:FeldSpar.Framework.Utilities.buildOutputReport(System.String,System.Collections.Generic.IEnumerable{FeldSpar.Framework.ExecutionSummary})">
 <summary>
 Takes results and divides them up by success and failures
 </summary>
 <param name="name">The name of the test assembly</param>
 <param name="results">the test results</param>
</member>
<member name="M:FeldSpar.Framework.Utilities.andAlsoEachOfThese``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Microsoft.FSharp.Core.FSharpFunc{``0,``1}})">
 <summary>
 Maps all items using each call function and returns sequence of all permutations
 </summary>
 <param name="items">the items to map</param>
 <param name="calls">the mapping functions that will get called on each item</param>
</member>
<member name="M:FeldSpar.Framework.Utilities.calledWithEachOfThese``2(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
 <summary>
 An alias for Seq.map
 </summary>
 <param name="items">the items to map</param>
 <param name="call">the function that is called on each item</param>
</member>
<member name="P:FeldSpar.Framework.Utilities.indeterminateTest">
 <summary>
 Returns a failure result of failure type 'Ignored' with a message indicating test has an indeterminate test result.
 </summary>
</member>
<member name="P:FeldSpar.Framework.Utilities.Not Yet Implemented">
 <summary>
 Returns a failure result of failure type 'Ignored' with a message indicating test is not yet implemented
 </summary>
</member>
<member name="M:FeldSpar.Framework.Utilities.failResult(System.String)">
 <summary>
 Creates a failure result of type 'GeneralFailure' with a desired message
 </summary>
 <param name="message">The message to wrap into a failure result</param>
</member>
<member name="M:FeldSpar.Framework.Utilities.failException(System.Exception)">
 <summary>
 Wraps an exception into a failure result with a failure type of 'FailureException'
 </summary>
 <param name="ex">The exception to convert to a failure result</param>
</member>
<member name="M:FeldSpar.Framework.Utilities.ignoreWith(System.String)">
 <summary>
 Returns a Failure result with failure type of 'Ignored' and with the desired message
 </summary>
 <param name="message"></param>
</member>
<member name="M:FeldSpar.Framework.Utilities.withFailComment(System.String,FeldSpar.Framework.TestResult)">
 <summary>
 Adds an additional comment to the beginnig of a failure message
 </summary>
 <param name="comment">The comment that is added</param>
 <param name="result">The result to add the comment to. The comment is only added if the result is a failure</param>
</member>
<member name="M:FeldSpar.Framework.Utilities.getMessage(FeldSpar.Framework.TestResult)">
 <summary>
 Gets the failure message from a result or an empty string if success
 </summary>
 <param name="result">Dhe result from which to get the message.</param>
</member>
<member name="T:FeldSpar.Framework.Utilities">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.Verification.ApprovalsSupport">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FeldSpar.Framework.Verification.Checks.checkAllAgainstStandard``1(FeldSpar.Framework.TestEnvironment,System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Gold standard testing. Compares the given items against a saved binary file to determine if they match by calling 'ToSting' on each item.
 </summary>
 <param name="env">Information about the current test environment and current test.</param>
 <param name="tests">The sequence of items being tested</param>
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.checkAllAgainstStandardBy``1(FeldSpar.Framework.TestEnvironment,Microsoft.FSharp.Core.FSharpFunc{``0,System.String},System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Gold standard testing. Compares the given items against a saved binary file to determine if they match by converting them to strings.
 </summary>
 <param name="env">Information about the current test environment and current test.</param>
 <param name="converter">A method of converting an item to a string</param>
 <param name="tests">The sequence of items being tested</param>
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.checkAgainstStandardStream(FeldSpar.Framework.TestEnvironment,System.String,System.IO.Stream)">
 <summary>
 Gold standard testing. Compares the given binary stream against a saved binary file to determine if they match.
 </summary>
 <param name="env">Information about the current test environment and current test.</param>
 <param name="extentionWithoutDot">The file extension associated with this binary type</param>
 <param name="test">The binary stream being tested</param>
 <returns>Success if the binary stream matches the file otherwise an Failure of type StandardNotMet</returns>  
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.checkAgainstStandardBinary(FeldSpar.Framework.TestEnvironment,System.String,System.Byte[])">
 <summary>
 Gold standard testing. Compares the given binary array against a saved binary file to determine if they match.
 </summary>
 <param name="env">Information about the current test environment and current test.</param>
 <param name="extentionWithoutDot">The file extension associated with this binary type</param>
 <param name="test">The binary array being tested</param>
 <returns>Success if the binary array matches the file otherwise an Failure of type StandardNotMet</returns>  
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.checkAgainstStandardObjectAsString``1(FeldSpar.Framework.TestEnvironment,``0)">
 <summary>
 Gold standard testing. Compares the given object against a saved file to determine if they match by calling 'ToString' on the object.
 </summary>
 <param name="env">Information about the current test environment and current test.</param>
 <param name="test">The string being tested</param>
 <returns>Success if the string matches the file otherwise an Failure of type StandardNotMet</returns>  
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.checkAgainstStringStandard(FeldSpar.Framework.TestEnvironment,System.String)">
 <summary>
 Gold standard testing. Compares the given string against a saved file to determine if they match.
 </summary>
 <param name="env">Information about the current test environment and current test.</param>
 <param name="test">The string being tested</param>
 <returns>Success if the string matches the file otherwise an Failure of type StandardNotMet</returns>  
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.isNotNull``1(``0)">
 <summary>
 Tests a given value to determine if it is not null
 </summary>
 <param name="actual">The value being tested</param>
 <returns>Success if value is not null otherwise an Failure of type ExpectationFailure</returns>  
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.isNull``1(``0)">
 <summary>
 Tests a given value to determine if it is null
 </summary>
 <param name="actual">The value being tested</param>
 <returns>Success if value is null otherwise an Failure of type ExpectationFailure</returns>
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.expectsToBeFalse(System.Boolean)">
 <summary>
 Tests a given boolean to determine if it is false
 </summary>
 <param name="actual">The boolean being tested</param>
 <returns>Success if value is false otherwise an Failure of type ExpectationFailure</returns>
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.expectsToBeTrue(System.Boolean)">
 <summary>
 Tests a given boolean to determine if it is true
 </summary>
 <param name="actual">The boolean being tested</param>
 <returns>Success if value is true otherwise an Failure of type ExpectationFailure</returns>
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.expectsNotToBe``1(``0,``0)">
 <summary>
 Tests a given value to determine if it is not equal to the given value
 </summary>
 <param name="expected">the value that is not expected</param>
 <param name="actual">the value being tested</param>
 <returns>Success if both are not equal otherwise an Failure of type ExpectationFailure</returns>
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.expectsToBe``1(``0,``0)">
 <summary>
 Tests a given value to determine if it is equal to the given value
 </summary>
 <param name="expected">the value that is expected</param>
 <param name="actual">the value being tested</param>
 <returns>Success if both are equal otherwise an Failure of type ExpectationFailure</returns>
</member>
<member name="">

</member>
<member name="M:FeldSpar.Framework.Verification.Checks.isFalse(FeldSpar.Framework.FailureType,Microsoft.FSharp.Core.FSharpRef{System.Boolean})">
 <summary>
 Tests a boolean for false
 </summary>
 <param name="failure">the failure type used to fail if the test was true</param>
 <param name="test">the boolean being tested for false</param>
 <returns>A Success if the boolean is false otherwise a failure using the failure type provided</returns>
</member>
<member name="M:FeldSpar.Framework.Verification.Checks.isTrue(FeldSpar.Framework.FailureType,System.Boolean)">
 <summary>
 Tests a boolean for true
 </summary>
 <param name="failure">the failure type used to fail if the test was not true</param>
 <param name="test">the boolean being tested for true</param>
 <returns>A Success if the boolean is true otherwise a failure using the failure type provided</returns>
</member>
<member name="T:FeldSpar.Framework.Verification.Checks">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FeldSpar.Framework.Verification.ChecksClean">

</member>
</members>
</doc>
